//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class UserOdPrefCrud {
		///<summary>Gets one UserOdPref object from the database using the primary key.  Returns null if not found.</summary>
		public static UserOdPref SelectOne(long userOdPrefNum){
			string command="SELECT * FROM userodpref "
				+"WHERE UserOdPrefNum = "+POut.Long(userOdPrefNum);
			List<UserOdPref> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one UserOdPref object from the database using a query.</summary>
		public static UserOdPref SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<UserOdPref> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of UserOdPref objects from the database using a query.</summary>
		public static List<UserOdPref> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<UserOdPref> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<UserOdPref> TableToList(DataTable table){
			List<UserOdPref> retVal=new List<UserOdPref>();
			UserOdPref userOdPref;
			foreach(DataRow row in table.Rows) {
				userOdPref=new UserOdPref();
				userOdPref.UserOdPrefNum= PIn.Long  (row["UserOdPrefNum"].ToString());
				userOdPref.UserNum      = PIn.Long  (row["UserNum"].ToString());
				userOdPref.Fkey         = PIn.Long  (row["Fkey"].ToString());
				userOdPref.FkeyType     = (OpenDentBusiness.UserOdFkeyType)PIn.Int(row["FkeyType"].ToString());
				userOdPref.ValueString  = PIn.String(row["ValueString"].ToString());
				retVal.Add(userOdPref);
			}
			return retVal;
		}

		///<summary>Converts a list of UserOdPref into a DataTable.</summary>
		public static DataTable ListToTable(List<UserOdPref> listUserOdPrefs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="UserOdPref";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("UserOdPrefNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("Fkey");
			table.Columns.Add("FkeyType");
			table.Columns.Add("ValueString");
			foreach(UserOdPref userOdPref in listUserOdPrefs) {
				table.Rows.Add(new object[] {
					POut.Long  (userOdPref.UserOdPrefNum),
					POut.Long  (userOdPref.UserNum),
					POut.Long  (userOdPref.Fkey),
					POut.Int   ((int)userOdPref.FkeyType),
					            userOdPref.ValueString,
				});
			}
			return table;
		}

		///<summary>Inserts one UserOdPref into the database.  Returns the new priKey.</summary>
		public static long Insert(UserOdPref userOdPref){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				userOdPref.UserOdPrefNum=DbHelper.GetNextOracleKey("userodpref","UserOdPrefNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(userOdPref,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							userOdPref.UserOdPrefNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(userOdPref,false);
			}
		}

		///<summary>Inserts one UserOdPref into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(UserOdPref userOdPref,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				userOdPref.UserOdPrefNum=ReplicationServers.GetKey("userodpref","UserOdPrefNum");
			}
			string command="INSERT INTO userodpref (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="UserOdPrefNum,";
			}
			command+="UserNum,Fkey,FkeyType,ValueString) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(userOdPref.UserOdPrefNum)+",";
			}
			command+=
				     POut.Long  (userOdPref.UserNum)+","
				+    POut.Long  (userOdPref.Fkey)+","
				+    POut.Int   ((int)userOdPref.FkeyType)+","
				+"'"+POut.String(userOdPref.ValueString)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				userOdPref.UserOdPrefNum=Db.NonQ(command,true);
			}
			return userOdPref.UserOdPrefNum;
		}

		///<summary>Inserts one UserOdPref into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(UserOdPref userOdPref){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(userOdPref,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					userOdPref.UserOdPrefNum=DbHelper.GetNextOracleKey("userodpref","UserOdPrefNum"); //Cacheless method
				}
				return InsertNoCache(userOdPref,true);
			}
		}

		///<summary>Inserts one UserOdPref into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(UserOdPref userOdPref,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO userodpref (";
			if(!useExistingPK && isRandomKeys) {
				userOdPref.UserOdPrefNum=ReplicationServers.GetKeyNoCache("userodpref","UserOdPrefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="UserOdPrefNum,";
			}
			command+="UserNum,Fkey,FkeyType,ValueString) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(userOdPref.UserOdPrefNum)+",";
			}
			command+=
				     POut.Long  (userOdPref.UserNum)+","
				+    POut.Long  (userOdPref.Fkey)+","
				+    POut.Int   ((int)userOdPref.FkeyType)+","
				+"'"+POut.String(userOdPref.ValueString)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				userOdPref.UserOdPrefNum=Db.NonQ(command,true);
			}
			return userOdPref.UserOdPrefNum;
		}

		///<summary>Updates one UserOdPref in the database.</summary>
		public static void Update(UserOdPref userOdPref){
			string command="UPDATE userodpref SET "
				+"UserNum      =  "+POut.Long  (userOdPref.UserNum)+", "
				+"Fkey         =  "+POut.Long  (userOdPref.Fkey)+", "
				+"FkeyType     =  "+POut.Int   ((int)userOdPref.FkeyType)+", "
				+"ValueString  = '"+POut.String(userOdPref.ValueString)+"' "
				+"WHERE UserOdPrefNum = "+POut.Long(userOdPref.UserOdPrefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one UserOdPref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(UserOdPref userOdPref,UserOdPref oldUserOdPref){
			string command="";
			if(userOdPref.UserNum != oldUserOdPref.UserNum) {
				if(command!=""){ command+=",";}
				command+="UserNum = "+POut.Long(userOdPref.UserNum)+"";
			}
			if(userOdPref.Fkey != oldUserOdPref.Fkey) {
				if(command!=""){ command+=",";}
				command+="Fkey = "+POut.Long(userOdPref.Fkey)+"";
			}
			if(userOdPref.FkeyType != oldUserOdPref.FkeyType) {
				if(command!=""){ command+=",";}
				command+="FkeyType = "+POut.Int   ((int)userOdPref.FkeyType)+"";
			}
			if(userOdPref.ValueString != oldUserOdPref.ValueString) {
				if(command!=""){ command+=",";}
				command+="ValueString = '"+POut.String(userOdPref.ValueString)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE userodpref SET "+command
				+" WHERE UserOdPrefNum = "+POut.Long(userOdPref.UserOdPrefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(UserOdPref,UserOdPref) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(UserOdPref userOdPref,UserOdPref oldUserOdPref) {
			if(userOdPref.UserNum != oldUserOdPref.UserNum) {
				return true;
			}
			if(userOdPref.Fkey != oldUserOdPref.Fkey) {
				return true;
			}
			if(userOdPref.FkeyType != oldUserOdPref.FkeyType) {
				return true;
			}
			if(userOdPref.ValueString != oldUserOdPref.ValueString) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one UserOdPref from the database.</summary>
		public static void Delete(long userOdPrefNum){
			string command="DELETE FROM userodpref "
				+"WHERE UserOdPrefNum = "+POut.Long(userOdPrefNum);
			Db.NonQ(command);
		}

	}
}
//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class AppointmentDeletedCrud {
		///<summary>Gets one AppointmentDeleted object from the database using the primary key.  Returns null if not found.</summary>
		public static AppointmentDeleted SelectOne(long appointmentDeletedNum){
			string command="SELECT * FROM appointmentdeleted "
				+"WHERE AppointmentDeletedNum = "+POut.Long(appointmentDeletedNum);
			List<AppointmentDeleted> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AppointmentDeleted object from the database using a query.</summary>
		public static AppointmentDeleted SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AppointmentDeleted> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AppointmentDeleted objects from the database using a query.</summary>
		public static List<AppointmentDeleted> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AppointmentDeleted> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<AppointmentDeleted> TableToList(DataTable table){
			List<AppointmentDeleted> retVal=new List<AppointmentDeleted>();
			AppointmentDeleted appointmentDeleted;
			foreach(DataRow row in table.Rows) {
				appointmentDeleted=new AppointmentDeleted();
				appointmentDeleted.AppointmentDeletedNum= PIn.Long  (row["AppointmentDeletedNum"].ToString());
				appointmentDeleted.AptNum               = PIn.Long  (row["AptNum"].ToString());
				appointmentDeleted.PatNum               = PIn.Long  (row["PatNum"].ToString());
				appointmentDeleted.AptStatus            = (OpenDentBusiness.ApptStatus)PIn.Int(row["AptStatus"].ToString());
				appointmentDeleted.Pattern              = PIn.String(row["Pattern"].ToString());
				appointmentDeleted.Confirmed            = PIn.Long  (row["Confirmed"].ToString());
				appointmentDeleted.TimeLocked           = PIn.Bool  (row["TimeLocked"].ToString());
				appointmentDeleted.Op                   = PIn.Long  (row["Op"].ToString());
				appointmentDeleted.Note                 = PIn.String(row["Note"].ToString());
				appointmentDeleted.ProvNum              = PIn.Long  (row["ProvNum"].ToString());
				appointmentDeleted.ProvHyg              = PIn.Long  (row["ProvHyg"].ToString());
				appointmentDeleted.AptDateTime          = PIn.DateT (row["AptDateTime"].ToString());
				appointmentDeleted.NextAptNum           = PIn.Long  (row["NextAptNum"].ToString());
				appointmentDeleted.UnschedStatus        = PIn.Long  (row["UnschedStatus"].ToString());
				appointmentDeleted.IsNewPatient         = PIn.Bool  (row["IsNewPatient"].ToString());
				appointmentDeleted.ProcDescript         = PIn.String(row["ProcDescript"].ToString());
				appointmentDeleted.Assistant            = PIn.Long  (row["Assistant"].ToString());
				appointmentDeleted.ClinicNum            = PIn.Long  (row["ClinicNum"].ToString());
				appointmentDeleted.IsHygiene            = PIn.Bool  (row["IsHygiene"].ToString());
				appointmentDeleted.DateTStamp           = PIn.DateT (row["DateTStamp"].ToString());
				appointmentDeleted.DateTimeArrived      = PIn.DateT (row["DateTimeArrived"].ToString());
				appointmentDeleted.DateTimeSeated       = PIn.DateT (row["DateTimeSeated"].ToString());
				appointmentDeleted.DateTimeDismissed    = PIn.DateT (row["DateTimeDismissed"].ToString());
				appointmentDeleted.InsPlan1             = PIn.Long  (row["InsPlan1"].ToString());
				appointmentDeleted.InsPlan2             = PIn.Long  (row["InsPlan2"].ToString());
				appointmentDeleted.DateTimeAskedToArrive= PIn.DateT (row["DateTimeAskedToArrive"].ToString());
				appointmentDeleted.ProcsColored         = PIn.String(row["ProcsColored"].ToString());
				appointmentDeleted.ColorOverride        = Color.FromArgb(PIn.Int(row["ColorOverride"].ToString()));
				appointmentDeleted.AppointmentTypeNum   = PIn.Long  (row["AppointmentTypeNum"].ToString());
				appointmentDeleted.SecUserNumEntry      = PIn.Long  (row["SecUserNumEntry"].ToString());
				appointmentDeleted.SecDateEntry         = PIn.Date  (row["SecDateEntry"].ToString());
				retVal.Add(appointmentDeleted);
			}
			return retVal;
		}

		///<summary>Converts a list of AppointmentDeleted into a DataTable.</summary>
		public static DataTable ListToTable(List<AppointmentDeleted> listAppointmentDeleteds,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="AppointmentDeleted";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("AppointmentDeletedNum");
			table.Columns.Add("AptNum");
			table.Columns.Add("PatNum");
			table.Columns.Add("AptStatus");
			table.Columns.Add("Pattern");
			table.Columns.Add("Confirmed");
			table.Columns.Add("TimeLocked");
			table.Columns.Add("Op");
			table.Columns.Add("Note");
			table.Columns.Add("ProvNum");
			table.Columns.Add("ProvHyg");
			table.Columns.Add("AptDateTime");
			table.Columns.Add("NextAptNum");
			table.Columns.Add("UnschedStatus");
			table.Columns.Add("IsNewPatient");
			table.Columns.Add("ProcDescript");
			table.Columns.Add("Assistant");
			table.Columns.Add("ClinicNum");
			table.Columns.Add("IsHygiene");
			table.Columns.Add("DateTStamp");
			table.Columns.Add("DateTimeArrived");
			table.Columns.Add("DateTimeSeated");
			table.Columns.Add("DateTimeDismissed");
			table.Columns.Add("InsPlan1");
			table.Columns.Add("InsPlan2");
			table.Columns.Add("DateTimeAskedToArrive");
			table.Columns.Add("ProcsColored");
			table.Columns.Add("ColorOverride");
			table.Columns.Add("AppointmentTypeNum");
			table.Columns.Add("SecUserNumEntry");
			table.Columns.Add("SecDateEntry");
			foreach(AppointmentDeleted appointmentDeleted in listAppointmentDeleteds) {
				table.Rows.Add(new object[] {
					POut.Long  (appointmentDeleted.AppointmentDeletedNum),
					POut.Long  (appointmentDeleted.AptNum),
					POut.Long  (appointmentDeleted.PatNum),
					POut.Int   ((int)appointmentDeleted.AptStatus),
					            appointmentDeleted.Pattern,
					POut.Long  (appointmentDeleted.Confirmed),
					POut.Bool  (appointmentDeleted.TimeLocked),
					POut.Long  (appointmentDeleted.Op),
					            appointmentDeleted.Note,
					POut.Long  (appointmentDeleted.ProvNum),
					POut.Long  (appointmentDeleted.ProvHyg),
					POut.DateT (appointmentDeleted.AptDateTime,false),
					POut.Long  (appointmentDeleted.NextAptNum),
					POut.Long  (appointmentDeleted.UnschedStatus),
					POut.Bool  (appointmentDeleted.IsNewPatient),
					            appointmentDeleted.ProcDescript,
					POut.Long  (appointmentDeleted.Assistant),
					POut.Long  (appointmentDeleted.ClinicNum),
					POut.Bool  (appointmentDeleted.IsHygiene),
					POut.DateT (appointmentDeleted.DateTStamp,false),
					POut.DateT (appointmentDeleted.DateTimeArrived,false),
					POut.DateT (appointmentDeleted.DateTimeSeated,false),
					POut.DateT (appointmentDeleted.DateTimeDismissed,false),
					POut.Long  (appointmentDeleted.InsPlan1),
					POut.Long  (appointmentDeleted.InsPlan2),
					POut.DateT (appointmentDeleted.DateTimeAskedToArrive,false),
					            appointmentDeleted.ProcsColored,
					POut.Int   (appointmentDeleted.ColorOverride.ToArgb()),
					POut.Long  (appointmentDeleted.AppointmentTypeNum),
					POut.Long  (appointmentDeleted.SecUserNumEntry),
					POut.DateT (appointmentDeleted.SecDateEntry,false),
				});
			}
			return table;
		}

		///<summary>Inserts one AppointmentDeleted into the database.  Returns the new priKey.</summary>
		public static long Insert(AppointmentDeleted appointmentDeleted){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				appointmentDeleted.AppointmentDeletedNum=DbHelper.GetNextOracleKey("appointmentdeleted","AppointmentDeletedNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(appointmentDeleted,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							appointmentDeleted.AppointmentDeletedNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(appointmentDeleted,false);
			}
		}

		///<summary>Inserts one AppointmentDeleted into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(AppointmentDeleted appointmentDeleted,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				appointmentDeleted.AppointmentDeletedNum=ReplicationServers.GetKey("appointmentdeleted","AppointmentDeletedNum");
			}
			string command="INSERT INTO appointmentdeleted (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AppointmentDeletedNum,";
			}
			command+="AptNum,PatNum,AptStatus,Pattern,Confirmed,TimeLocked,Op,Note,ProvNum,ProvHyg,AptDateTime,NextAptNum,UnschedStatus,IsNewPatient,ProcDescript,Assistant,ClinicNum,IsHygiene,DateTimeArrived,DateTimeSeated,DateTimeDismissed,InsPlan1,InsPlan2,DateTimeAskedToArrive,ProcsColored,ColorOverride,AppointmentTypeNum,SecUserNumEntry,SecDateEntry) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(appointmentDeleted.AppointmentDeletedNum)+",";
			}
			command+=
				     POut.Long  (appointmentDeleted.AptNum)+","
				+    POut.Long  (appointmentDeleted.PatNum)+","
				+    POut.Int   ((int)appointmentDeleted.AptStatus)+","
				+"'"+POut.String(appointmentDeleted.Pattern)+"',"
				+    POut.Long  (appointmentDeleted.Confirmed)+","
				+    POut.Bool  (appointmentDeleted.TimeLocked)+","
				+    POut.Long  (appointmentDeleted.Op)+","
				+"'"+POut.String(appointmentDeleted.Note)+"',"
				+    POut.Long  (appointmentDeleted.ProvNum)+","
				+    POut.Long  (appointmentDeleted.ProvHyg)+","
				+    POut.DateT (appointmentDeleted.AptDateTime)+","
				+    POut.Long  (appointmentDeleted.NextAptNum)+","
				+    POut.Long  (appointmentDeleted.UnschedStatus)+","
				+    POut.Bool  (appointmentDeleted.IsNewPatient)+","
				+"'"+POut.String(appointmentDeleted.ProcDescript)+"',"
				+    POut.Long  (appointmentDeleted.Assistant)+","
				+    POut.Long  (appointmentDeleted.ClinicNum)+","
				+    POut.Bool  (appointmentDeleted.IsHygiene)+","
				//DateTStamp can only be set by MySQL
				+    POut.DateT (appointmentDeleted.DateTimeArrived)+","
				+    POut.DateT (appointmentDeleted.DateTimeSeated)+","
				+    POut.DateT (appointmentDeleted.DateTimeDismissed)+","
				+    POut.Long  (appointmentDeleted.InsPlan1)+","
				+    POut.Long  (appointmentDeleted.InsPlan2)+","
				+    POut.DateT (appointmentDeleted.DateTimeAskedToArrive)+","
				+"'"+POut.String(appointmentDeleted.ProcsColored)+"',"
				+    POut.Int   (appointmentDeleted.ColorOverride.ToArgb())+","
				+    POut.Long  (appointmentDeleted.AppointmentTypeNum)+","
				+    POut.Long  (appointmentDeleted.SecUserNumEntry)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				appointmentDeleted.AppointmentDeletedNum=Db.NonQ(command,true);
			}
			return appointmentDeleted.AppointmentDeletedNum;
		}

		///<summary>Inserts one AppointmentDeleted into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(AppointmentDeleted appointmentDeleted){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(appointmentDeleted,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					appointmentDeleted.AppointmentDeletedNum=DbHelper.GetNextOracleKey("appointmentdeleted","AppointmentDeletedNum"); //Cacheless method
				}
				return InsertNoCache(appointmentDeleted,true);
			}
		}

		///<summary>Inserts one AppointmentDeleted into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(AppointmentDeleted appointmentDeleted,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO appointmentdeleted (";
			if(!useExistingPK && isRandomKeys) {
				appointmentDeleted.AppointmentDeletedNum=ReplicationServers.GetKeyNoCache("appointmentdeleted","AppointmentDeletedNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="AppointmentDeletedNum,";
			}
			command+="AptNum,PatNum,AptStatus,Pattern,Confirmed,TimeLocked,Op,Note,ProvNum,ProvHyg,AptDateTime,NextAptNum,UnschedStatus,IsNewPatient,ProcDescript,Assistant,ClinicNum,IsHygiene,DateTimeArrived,DateTimeSeated,DateTimeDismissed,InsPlan1,InsPlan2,DateTimeAskedToArrive,ProcsColored,ColorOverride,AppointmentTypeNum,SecUserNumEntry,SecDateEntry) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(appointmentDeleted.AppointmentDeletedNum)+",";
			}
			command+=
				     POut.Long  (appointmentDeleted.AptNum)+","
				+    POut.Long  (appointmentDeleted.PatNum)+","
				+    POut.Int   ((int)appointmentDeleted.AptStatus)+","
				+"'"+POut.String(appointmentDeleted.Pattern)+"',"
				+    POut.Long  (appointmentDeleted.Confirmed)+","
				+    POut.Bool  (appointmentDeleted.TimeLocked)+","
				+    POut.Long  (appointmentDeleted.Op)+","
				+"'"+POut.String(appointmentDeleted.Note)+"',"
				+    POut.Long  (appointmentDeleted.ProvNum)+","
				+    POut.Long  (appointmentDeleted.ProvHyg)+","
				+    POut.DateT (appointmentDeleted.AptDateTime)+","
				+    POut.Long  (appointmentDeleted.NextAptNum)+","
				+    POut.Long  (appointmentDeleted.UnschedStatus)+","
				+    POut.Bool  (appointmentDeleted.IsNewPatient)+","
				+"'"+POut.String(appointmentDeleted.ProcDescript)+"',"
				+    POut.Long  (appointmentDeleted.Assistant)+","
				+    POut.Long  (appointmentDeleted.ClinicNum)+","
				+    POut.Bool  (appointmentDeleted.IsHygiene)+","
				//DateTStamp can only be set by MySQL
				+    POut.DateT (appointmentDeleted.DateTimeArrived)+","
				+    POut.DateT (appointmentDeleted.DateTimeSeated)+","
				+    POut.DateT (appointmentDeleted.DateTimeDismissed)+","
				+    POut.Long  (appointmentDeleted.InsPlan1)+","
				+    POut.Long  (appointmentDeleted.InsPlan2)+","
				+    POut.DateT (appointmentDeleted.DateTimeAskedToArrive)+","
				+"'"+POut.String(appointmentDeleted.ProcsColored)+"',"
				+    POut.Int   (appointmentDeleted.ColorOverride.ToArgb())+","
				+    POut.Long  (appointmentDeleted.AppointmentTypeNum)+","
				+    POut.Long  (appointmentDeleted.SecUserNumEntry)+","
				+    DbHelper.Now()+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				appointmentDeleted.AppointmentDeletedNum=Db.NonQ(command,true);
			}
			return appointmentDeleted.AppointmentDeletedNum;
		}

		///<summary>Updates one AppointmentDeleted in the database.</summary>
		public static void Update(AppointmentDeleted appointmentDeleted){
			string command="UPDATE appointmentdeleted SET "
				+"AptNum               =  "+POut.Long  (appointmentDeleted.AptNum)+", "
				+"PatNum               =  "+POut.Long  (appointmentDeleted.PatNum)+", "
				+"AptStatus            =  "+POut.Int   ((int)appointmentDeleted.AptStatus)+", "
				+"Pattern              = '"+POut.String(appointmentDeleted.Pattern)+"', "
				+"Confirmed            =  "+POut.Long  (appointmentDeleted.Confirmed)+", "
				+"TimeLocked           =  "+POut.Bool  (appointmentDeleted.TimeLocked)+", "
				+"Op                   =  "+POut.Long  (appointmentDeleted.Op)+", "
				+"Note                 = '"+POut.String(appointmentDeleted.Note)+"', "
				+"ProvNum              =  "+POut.Long  (appointmentDeleted.ProvNum)+", "
				+"ProvHyg              =  "+POut.Long  (appointmentDeleted.ProvHyg)+", "
				+"AptDateTime          =  "+POut.DateT (appointmentDeleted.AptDateTime)+", "
				+"NextAptNum           =  "+POut.Long  (appointmentDeleted.NextAptNum)+", "
				+"UnschedStatus        =  "+POut.Long  (appointmentDeleted.UnschedStatus)+", "
				+"IsNewPatient         =  "+POut.Bool  (appointmentDeleted.IsNewPatient)+", "
				+"ProcDescript         = '"+POut.String(appointmentDeleted.ProcDescript)+"', "
				+"Assistant            =  "+POut.Long  (appointmentDeleted.Assistant)+", "
				+"ClinicNum            =  "+POut.Long  (appointmentDeleted.ClinicNum)+", "
				+"IsHygiene            =  "+POut.Bool  (appointmentDeleted.IsHygiene)+", "
				//DateTStamp can only be set by MySQL
				+"DateTimeArrived      =  "+POut.DateT (appointmentDeleted.DateTimeArrived)+", "
				+"DateTimeSeated       =  "+POut.DateT (appointmentDeleted.DateTimeSeated)+", "
				+"DateTimeDismissed    =  "+POut.DateT (appointmentDeleted.DateTimeDismissed)+", "
				+"InsPlan1             =  "+POut.Long  (appointmentDeleted.InsPlan1)+", "
				+"InsPlan2             =  "+POut.Long  (appointmentDeleted.InsPlan2)+", "
				+"DateTimeAskedToArrive=  "+POut.DateT (appointmentDeleted.DateTimeAskedToArrive)+", "
				+"ProcsColored         = '"+POut.String(appointmentDeleted.ProcsColored)+"', "
				+"ColorOverride        =  "+POut.Int   (appointmentDeleted.ColorOverride.ToArgb())+", "
				+"AppointmentTypeNum   =  "+POut.Long  (appointmentDeleted.AppointmentTypeNum)+" "
				//SecUserNumEntry excluded from update
				//SecDateEntry not allowed to change
				+"WHERE AppointmentDeletedNum = "+POut.Long(appointmentDeleted.AppointmentDeletedNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AppointmentDeleted in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(AppointmentDeleted appointmentDeleted,AppointmentDeleted oldAppointmentDeleted){
			string command="";
			if(appointmentDeleted.AptNum != oldAppointmentDeleted.AptNum) {
				if(command!=""){ command+=",";}
				command+="AptNum = "+POut.Long(appointmentDeleted.AptNum)+"";
			}
			if(appointmentDeleted.PatNum != oldAppointmentDeleted.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(appointmentDeleted.PatNum)+"";
			}
			if(appointmentDeleted.AptStatus != oldAppointmentDeleted.AptStatus) {
				if(command!=""){ command+=",";}
				command+="AptStatus = "+POut.Int   ((int)appointmentDeleted.AptStatus)+"";
			}
			if(appointmentDeleted.Pattern != oldAppointmentDeleted.Pattern) {
				if(command!=""){ command+=",";}
				command+="Pattern = '"+POut.String(appointmentDeleted.Pattern)+"'";
			}
			if(appointmentDeleted.Confirmed != oldAppointmentDeleted.Confirmed) {
				if(command!=""){ command+=",";}
				command+="Confirmed = "+POut.Long(appointmentDeleted.Confirmed)+"";
			}
			if(appointmentDeleted.TimeLocked != oldAppointmentDeleted.TimeLocked) {
				if(command!=""){ command+=",";}
				command+="TimeLocked = "+POut.Bool(appointmentDeleted.TimeLocked)+"";
			}
			if(appointmentDeleted.Op != oldAppointmentDeleted.Op) {
				if(command!=""){ command+=",";}
				command+="Op = "+POut.Long(appointmentDeleted.Op)+"";
			}
			if(appointmentDeleted.Note != oldAppointmentDeleted.Note) {
				if(command!=""){ command+=",";}
				command+="Note = '"+POut.String(appointmentDeleted.Note)+"'";
			}
			if(appointmentDeleted.ProvNum != oldAppointmentDeleted.ProvNum) {
				if(command!=""){ command+=",";}
				command+="ProvNum = "+POut.Long(appointmentDeleted.ProvNum)+"";
			}
			if(appointmentDeleted.ProvHyg != oldAppointmentDeleted.ProvHyg) {
				if(command!=""){ command+=",";}
				command+="ProvHyg = "+POut.Long(appointmentDeleted.ProvHyg)+"";
			}
			if(appointmentDeleted.AptDateTime != oldAppointmentDeleted.AptDateTime) {
				if(command!=""){ command+=",";}
				command+="AptDateTime = "+POut.DateT(appointmentDeleted.AptDateTime)+"";
			}
			if(appointmentDeleted.NextAptNum != oldAppointmentDeleted.NextAptNum) {
				if(command!=""){ command+=",";}
				command+="NextAptNum = "+POut.Long(appointmentDeleted.NextAptNum)+"";
			}
			if(appointmentDeleted.UnschedStatus != oldAppointmentDeleted.UnschedStatus) {
				if(command!=""){ command+=",";}
				command+="UnschedStatus = "+POut.Long(appointmentDeleted.UnschedStatus)+"";
			}
			if(appointmentDeleted.IsNewPatient != oldAppointmentDeleted.IsNewPatient) {
				if(command!=""){ command+=",";}
				command+="IsNewPatient = "+POut.Bool(appointmentDeleted.IsNewPatient)+"";
			}
			if(appointmentDeleted.ProcDescript != oldAppointmentDeleted.ProcDescript) {
				if(command!=""){ command+=",";}
				command+="ProcDescript = '"+POut.String(appointmentDeleted.ProcDescript)+"'";
			}
			if(appointmentDeleted.Assistant != oldAppointmentDeleted.Assistant) {
				if(command!=""){ command+=",";}
				command+="Assistant = "+POut.Long(appointmentDeleted.Assistant)+"";
			}
			if(appointmentDeleted.ClinicNum != oldAppointmentDeleted.ClinicNum) {
				if(command!=""){ command+=",";}
				command+="ClinicNum = "+POut.Long(appointmentDeleted.ClinicNum)+"";
			}
			if(appointmentDeleted.IsHygiene != oldAppointmentDeleted.IsHygiene) {
				if(command!=""){ command+=",";}
				command+="IsHygiene = "+POut.Bool(appointmentDeleted.IsHygiene)+"";
			}
			//DateTStamp can only be set by MySQL
			if(appointmentDeleted.DateTimeArrived != oldAppointmentDeleted.DateTimeArrived) {
				if(command!=""){ command+=",";}
				command+="DateTimeArrived = "+POut.DateT(appointmentDeleted.DateTimeArrived)+"";
			}
			if(appointmentDeleted.DateTimeSeated != oldAppointmentDeleted.DateTimeSeated) {
				if(command!=""){ command+=",";}
				command+="DateTimeSeated = "+POut.DateT(appointmentDeleted.DateTimeSeated)+"";
			}
			if(appointmentDeleted.DateTimeDismissed != oldAppointmentDeleted.DateTimeDismissed) {
				if(command!=""){ command+=",";}
				command+="DateTimeDismissed = "+POut.DateT(appointmentDeleted.DateTimeDismissed)+"";
			}
			if(appointmentDeleted.InsPlan1 != oldAppointmentDeleted.InsPlan1) {
				if(command!=""){ command+=",";}
				command+="InsPlan1 = "+POut.Long(appointmentDeleted.InsPlan1)+"";
			}
			if(appointmentDeleted.InsPlan2 != oldAppointmentDeleted.InsPlan2) {
				if(command!=""){ command+=",";}
				command+="InsPlan2 = "+POut.Long(appointmentDeleted.InsPlan2)+"";
			}
			if(appointmentDeleted.DateTimeAskedToArrive != oldAppointmentDeleted.DateTimeAskedToArrive) {
				if(command!=""){ command+=",";}
				command+="DateTimeAskedToArrive = "+POut.DateT(appointmentDeleted.DateTimeAskedToArrive)+"";
			}
			if(appointmentDeleted.ProcsColored != oldAppointmentDeleted.ProcsColored) {
				if(command!=""){ command+=",";}
				command+="ProcsColored = '"+POut.String(appointmentDeleted.ProcsColored)+"'";
			}
			if(appointmentDeleted.ColorOverride != oldAppointmentDeleted.ColorOverride) {
				if(command!=""){ command+=",";}
				command+="ColorOverride = "+POut.Int(appointmentDeleted.ColorOverride.ToArgb())+"";
			}
			if(appointmentDeleted.AppointmentTypeNum != oldAppointmentDeleted.AppointmentTypeNum) {
				if(command!=""){ command+=",";}
				command+="AppointmentTypeNum = "+POut.Long(appointmentDeleted.AppointmentTypeNum)+"";
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			if(command==""){
				return false;
			}
			command="UPDATE appointmentdeleted SET "+command
				+" WHERE AppointmentDeletedNum = "+POut.Long(appointmentDeleted.AppointmentDeletedNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(AppointmentDeleted,AppointmentDeleted) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(AppointmentDeleted appointmentDeleted,AppointmentDeleted oldAppointmentDeleted) {
			if(appointmentDeleted.AptNum != oldAppointmentDeleted.AptNum) {
				return true;
			}
			if(appointmentDeleted.PatNum != oldAppointmentDeleted.PatNum) {
				return true;
			}
			if(appointmentDeleted.AptStatus != oldAppointmentDeleted.AptStatus) {
				return true;
			}
			if(appointmentDeleted.Pattern != oldAppointmentDeleted.Pattern) {
				return true;
			}
			if(appointmentDeleted.Confirmed != oldAppointmentDeleted.Confirmed) {
				return true;
			}
			if(appointmentDeleted.TimeLocked != oldAppointmentDeleted.TimeLocked) {
				return true;
			}
			if(appointmentDeleted.Op != oldAppointmentDeleted.Op) {
				return true;
			}
			if(appointmentDeleted.Note != oldAppointmentDeleted.Note) {
				return true;
			}
			if(appointmentDeleted.ProvNum != oldAppointmentDeleted.ProvNum) {
				return true;
			}
			if(appointmentDeleted.ProvHyg != oldAppointmentDeleted.ProvHyg) {
				return true;
			}
			if(appointmentDeleted.AptDateTime != oldAppointmentDeleted.AptDateTime) {
				return true;
			}
			if(appointmentDeleted.NextAptNum != oldAppointmentDeleted.NextAptNum) {
				return true;
			}
			if(appointmentDeleted.UnschedStatus != oldAppointmentDeleted.UnschedStatus) {
				return true;
			}
			if(appointmentDeleted.IsNewPatient != oldAppointmentDeleted.IsNewPatient) {
				return true;
			}
			if(appointmentDeleted.ProcDescript != oldAppointmentDeleted.ProcDescript) {
				return true;
			}
			if(appointmentDeleted.Assistant != oldAppointmentDeleted.Assistant) {
				return true;
			}
			if(appointmentDeleted.ClinicNum != oldAppointmentDeleted.ClinicNum) {
				return true;
			}
			if(appointmentDeleted.IsHygiene != oldAppointmentDeleted.IsHygiene) {
				return true;
			}
			//DateTStamp can only be set by MySQL
			if(appointmentDeleted.DateTimeArrived != oldAppointmentDeleted.DateTimeArrived) {
				return true;
			}
			if(appointmentDeleted.DateTimeSeated != oldAppointmentDeleted.DateTimeSeated) {
				return true;
			}
			if(appointmentDeleted.DateTimeDismissed != oldAppointmentDeleted.DateTimeDismissed) {
				return true;
			}
			if(appointmentDeleted.InsPlan1 != oldAppointmentDeleted.InsPlan1) {
				return true;
			}
			if(appointmentDeleted.InsPlan2 != oldAppointmentDeleted.InsPlan2) {
				return true;
			}
			if(appointmentDeleted.DateTimeAskedToArrive != oldAppointmentDeleted.DateTimeAskedToArrive) {
				return true;
			}
			if(appointmentDeleted.ProcsColored != oldAppointmentDeleted.ProcsColored) {
				return true;
			}
			if(appointmentDeleted.ColorOverride != oldAppointmentDeleted.ColorOverride) {
				return true;
			}
			if(appointmentDeleted.AppointmentTypeNum != oldAppointmentDeleted.AppointmentTypeNum) {
				return true;
			}
			//SecUserNumEntry excluded from update
			//SecDateEntry not allowed to change
			return false;
		}

		///<summary>Deletes one AppointmentDeleted from the database.</summary>
		public static void Delete(long appointmentDeletedNum){
			string command="DELETE FROM appointmentdeleted "
				+"WHERE AppointmentDeletedNum = "+POut.Long(appointmentDeletedNum);
			Db.NonQ(command);
		}

	}
}
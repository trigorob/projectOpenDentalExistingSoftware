//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class StmtProcAttachCrud {
		///<summary>Gets one StmtProcAttach object from the database using the primary key.  Returns null if not found.</summary>
		public static StmtProcAttach SelectOne(long stmtProcAttachNum){
			string command="SELECT * FROM stmtprocattach "
				+"WHERE StmtProcAttachNum = "+POut.Long(stmtProcAttachNum);
			List<StmtProcAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one StmtProcAttach object from the database using a query.</summary>
		public static StmtProcAttach SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<StmtProcAttach> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of StmtProcAttach objects from the database using a query.</summary>
		public static List<StmtProcAttach> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<StmtProcAttach> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<StmtProcAttach> TableToList(DataTable table){
			List<StmtProcAttach> retVal=new List<StmtProcAttach>();
			StmtProcAttach stmtProcAttach;
			foreach(DataRow row in table.Rows) {
				stmtProcAttach=new StmtProcAttach();
				stmtProcAttach.StmtProcAttachNum= PIn.Long  (row["StmtProcAttachNum"].ToString());
				stmtProcAttach.StatementNum     = PIn.Long  (row["StatementNum"].ToString());
				stmtProcAttach.ProcNum          = PIn.Long  (row["ProcNum"].ToString());
				retVal.Add(stmtProcAttach);
			}
			return retVal;
		}

		///<summary>Converts a list of StmtProcAttach into a DataTable.</summary>
		public static DataTable ListToTable(List<StmtProcAttach> listStmtProcAttachs,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="StmtProcAttach";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("StmtProcAttachNum");
			table.Columns.Add("StatementNum");
			table.Columns.Add("ProcNum");
			foreach(StmtProcAttach stmtProcAttach in listStmtProcAttachs) {
				table.Rows.Add(new object[] {
					POut.Long  (stmtProcAttach.StmtProcAttachNum),
					POut.Long  (stmtProcAttach.StatementNum),
					POut.Long  (stmtProcAttach.ProcNum),
				});
			}
			return table;
		}

		///<summary>Inserts one StmtProcAttach into the database.  Returns the new priKey.</summary>
		public static long Insert(StmtProcAttach stmtProcAttach){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				stmtProcAttach.StmtProcAttachNum=DbHelper.GetNextOracleKey("stmtprocattach","StmtProcAttachNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(stmtProcAttach,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							stmtProcAttach.StmtProcAttachNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(stmtProcAttach,false);
			}
		}

		///<summary>Inserts one StmtProcAttach into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(StmtProcAttach stmtProcAttach,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				stmtProcAttach.StmtProcAttachNum=ReplicationServers.GetKey("stmtprocattach","StmtProcAttachNum");
			}
			string command="INSERT INTO stmtprocattach (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="StmtProcAttachNum,";
			}
			command+="StatementNum,ProcNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(stmtProcAttach.StmtProcAttachNum)+",";
			}
			command+=
				     POut.Long  (stmtProcAttach.StatementNum)+","
				+    POut.Long  (stmtProcAttach.ProcNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				stmtProcAttach.StmtProcAttachNum=Db.NonQ(command,true);
			}
			return stmtProcAttach.StmtProcAttachNum;
		}

		///<summary>Inserts one StmtProcAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(StmtProcAttach stmtProcAttach){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(stmtProcAttach,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					stmtProcAttach.StmtProcAttachNum=DbHelper.GetNextOracleKey("stmtprocattach","StmtProcAttachNum"); //Cacheless method
				}
				return InsertNoCache(stmtProcAttach,true);
			}
		}

		///<summary>Inserts one StmtProcAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(StmtProcAttach stmtProcAttach,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO stmtprocattach (";
			if(!useExistingPK && isRandomKeys) {
				stmtProcAttach.StmtProcAttachNum=ReplicationServers.GetKeyNoCache("stmtprocattach","StmtProcAttachNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="StmtProcAttachNum,";
			}
			command+="StatementNum,ProcNum) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(stmtProcAttach.StmtProcAttachNum)+",";
			}
			command+=
				     POut.Long  (stmtProcAttach.StatementNum)+","
				+    POut.Long  (stmtProcAttach.ProcNum)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				stmtProcAttach.StmtProcAttachNum=Db.NonQ(command,true);
			}
			return stmtProcAttach.StmtProcAttachNum;
		}

		///<summary>Updates one StmtProcAttach in the database.</summary>
		public static void Update(StmtProcAttach stmtProcAttach){
			string command="UPDATE stmtprocattach SET "
				+"StatementNum     =  "+POut.Long  (stmtProcAttach.StatementNum)+", "
				+"ProcNum          =  "+POut.Long  (stmtProcAttach.ProcNum)+" "
				+"WHERE StmtProcAttachNum = "+POut.Long(stmtProcAttach.StmtProcAttachNum);
			Db.NonQ(command);
		}

		///<summary>Updates one StmtProcAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(StmtProcAttach stmtProcAttach,StmtProcAttach oldStmtProcAttach){
			string command="";
			if(stmtProcAttach.StatementNum != oldStmtProcAttach.StatementNum) {
				if(command!=""){ command+=",";}
				command+="StatementNum = "+POut.Long(stmtProcAttach.StatementNum)+"";
			}
			if(stmtProcAttach.ProcNum != oldStmtProcAttach.ProcNum) {
				if(command!=""){ command+=",";}
				command+="ProcNum = "+POut.Long(stmtProcAttach.ProcNum)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE stmtprocattach SET "+command
				+" WHERE StmtProcAttachNum = "+POut.Long(stmtProcAttach.StmtProcAttachNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(StmtProcAttach,StmtProcAttach) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(StmtProcAttach stmtProcAttach,StmtProcAttach oldStmtProcAttach) {
			if(stmtProcAttach.StatementNum != oldStmtProcAttach.StatementNum) {
				return true;
			}
			if(stmtProcAttach.ProcNum != oldStmtProcAttach.ProcNum) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one StmtProcAttach from the database.</summary>
		public static void Delete(long stmtProcAttachNum){
			string command="DELETE FROM stmtprocattach "
				+"WHERE StmtProcAttachNum = "+POut.Long(stmtProcAttachNum);
			Db.NonQ(command);
		}

	}
}